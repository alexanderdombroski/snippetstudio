{
  "name": "snippetstudio",
  "displayName": "SnippetStudio",
  "description": "A snippets manager that assists you in creating, editing, viewing, and deleteing snippets and snippet files.",
  "version": "1.0.0",
  "publisher": "AlexDombroski",
  "author": {
    "name": "Alex Dombroski",
    "email": "alexdombroski1@gmail.com",
    "url": "https://github.com/alexanderdombroski"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/alexanderdombroski/snippetstudio.git"
  },
  "engines": {
    "vscode": "^1.97.0",
    "node": "^20.0.0"
  },
  "capabilities": {
    "virtualWorkspaces": {
      "supported": "limited",
      "description": "Needs to access a file system and node.js file related modules like fs, path, and glob."
    }
  },
  "license": "MIT",
  "categories": [
    "Snippets",
    "Visualization",
    "Other"
  ],
  "keywords": [
    "snippets",
    "snippet editor",
    "snippet manager",
    "gui editor",
    "code completion"
  ],
  "preview": true,
  "pricing": "Free",
  "activationEvents": [],
  "main": "./dist/extension.js",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "snippet-manager-view-container",
          "title": "Snippet Studio Manager",
          "icon": "$(repo)"
        }
      ]
    },
    "views": {
      "snippet-manager-view-container": [
        {
          "id": "snippet-data",
          "name": "Snippet Editor",
          "type": "webview",
          "when": "snippetstudio.editorVisible",
          "icon": "$(book)"
        },
        {
          "id": "snippet-manager-view",
          "name": "Snippets",
          "type": "tree",
          "icon": "$(repo)"
        },
        {
          "id": "location-manager",
          "name": "Locations Manager",
          "type": "tree",
          "icon": "$(database)"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "snippet-manager-view",
        "contents": "Snippets of the active language will appear here!"
      },
      {
        "view": "location-manager",
        "contents": "This is where snippet files of ALL languages being loaded in will appear!"
      }
    ],
    "commands": [
      {
        "command": "snippetstudio.openView",
        "title": "Open Snippet Manager"
      },
      {
        "command": "snippetstudio.addGlobalSnippet",
        "title": "Add Global Snippet",
        "icon": "$(plus)",
        "shortTitle": "Add Snippet",
        "category": "snippetstudio"
      },
      {
        "command": "snippetstudio.openSettings",
        "title": "Open Snippet Studio Settings",
        "icon": "$(gear)",
        "category": "snippetstudio"
      },
      {
        "command": "snippetstudio.showSnippetBody",
        "title": "Show Snippet Body",
        "when": false
      },
      {
        "command": "snippetstudio.openSnippetFile",
        "title": "Open Snippet File",
        "when": false
      },
      {
        "command": "snippetstudio.deleteSnippetFile",
        "title": "Delete Snippet File",
        "icon": "$(trash)",
        "when": false
      },
      {
        "command": "snippetstudio.editSnippet",
        "title": "Edit Snippet File",
        "icon": "$(pencil)",
        "when": false
      },
      {
        "command": "snippetstudio.deleteSnippet",
        "title": "Delete Snippet",
        "icon": "$(trash)",
        "when": false
      },
      {
        "command": "snippetstudio.refresh",
        "title": "Refresh Snippets",
        "icon": "$(refresh)",
        "category": "snippetstudio"
      },
      {
        "command": "snippetstudio.refreshLocations",
        "title": "Refresh Locations",
        "icon": "$(refresh)",
        "category": "snippetstudio"
      },
      {
        "command": "snippetstudio.createGlobalLangFile",
        "title": "Create Global Snippets File",
        "icon": "$(file-code)",
        "category": "snippetstudio"
      },
      {
        "command": "snippetstudio.createLocalSnippetsFile",
        "title": "Create Local Mixed Snippets File",
        "icon": "$(book)",
        "category": "snippetstudio"
      },
      {
        "command": "snippetstudio.createGlobalSnippetsFile",
        "title": "Create Global Mixed Snippets File",
        "icon": "$(book)",
        "category": "snippetstudio"
      },
      {
        "command": "snippetstudio.createLocalLangFile",
        "title": "Create Local Snippets File",
        "icon": "$(file-code)",
        "category": "snippetstudio"
      },
      {
        "command": "snippetstudio.saveSnippet",
        "title": "Accept Snippet Changes",
        "shortTitle": "Save Sippet",
        "icon": "$(check)",
        "when": false
      },
      {
        "command": "snippetstudio.cancelSnippet",
        "title": "Discard Snippet Changes",
        "shortTitle": "Cancel Snippet",
        "icon": "$(discard)",
        "when": false
      },
      {
        "command": "snippetstudio.createSnippetAtLocation",
        "title": "Create Snippet at the given file",
        "icon": "$(plus)",
        "when": false
      },
      {
        "command": "snippetstudio.createGlobalLangSnippetFromSelection",
        "title": "Create language-specific Snippet",
        "shortTitle": "Create Language Snippet",
        "category": "snippetstudio"
      },
      {
        "command": "snippetstudio.createGlobalMixedSnippetFromSelection",
        "title": "Create mixed-language snippet",
        "shortTitle": "Create Mixed Snippet",
        "category": "snippetstudio"
      }
    ],
    "menus": {
      "editor/title": [
        {
          "command": "snippetstudio.saveSnippet",
          "when": "resourceScheme == snippetstudio",
          "group": "navigation"
        },
        {
          "command": "snippetstudio.cancelSnippet",
          "when": "resourceScheme == snippetstudio",
          "group": "navigation"
        }
      ],
      "editor/context": [
        {
          "command": "snippetstudio.createGlobalLangSnippetFromSelection",
          "when": "editor.hasSelection",
          "group": "snippetstudio"
        },
        {
          "command": "snippetstudio.createGlobalMixedSnippetFromSelection",
          "when": "editor.hasSelection",
          "group": "snippetstudio"
        }
      ],
      "view/title": [
        {
          "command": "snippetstudio.openSettings",
          "when": "view == snippet-manager-view",
          "group": "navigation"
        },
        {
          "command": "snippetstudio.addGlobalSnippet",
          "when": "view == snippet-manager-view",
          "group": "navigation"
        },
        {
          "command": "snippetstudio.refresh",
          "when": "view == snippet-manager-view",
          "group": "navigation"
        },
        {
          "command": "snippetstudio.refreshLocations",
          "when": "view == location-manager",
          "group": "navigation"
        },
        {
          "command": "snippetstudio.createLocalLangFile",
          "group": "inline",
          "when": "view == location-manager"
        },
        {
          "command": "snippetstudio.createGlobalLangFile",
          "group": "inline",
          "when": "view == location-manager"
        },
        {
          "command": "snippetstudio.createLocalSnippetsFile",
          "group": "inline",
          "when": "view == location-manager"
        },
        {
          "command": "snippetstudio.createGlobalSnippetsFile",
          "group": "inline",
          "when": "view == location-manager"
        }
      ],
      "view/item/context": [
        {
          "command": "snippetstudio.openSnippetFile",
          "when": "viewItem == snippet-filepath",
          "group": "navigation"
        },
        {
          "command": "snippetstudio.deleteSnippetFile",
          "when": "viewItem == snippet-filepath",
          "group": "navigation"
        },
        {
          "command": "snippetstudio.deleteSnippet",
          "when": "viewItem == snippet",
          "group": "navigation"
        },
        {
          "command": "snippetstudio.editSnippet",
          "when": "viewItem == snippet",
          "group": "inline"
        },
        {
          "command": "snippetstudio.createSnippetAtLocation",
          "when": "viewItem == snippet-filepath",
          "group": "inline"
        }
      ]
    },
    "configuration": {
      "title": "SnippetStudio Configuration",
      "properties": {
        "snippetstudio.confirmSnippetDeletion": {
          "type": "boolean",
          "default": false,
          "description": "Indicates whether to show a warning before deleting a snippet."
        },
        "snippetstudio.defaultSnippetPrefix": {
          "type": "string",
          "default": "",
          "description": "Set a default placeholder prefix for new snippets"
        },
        "snippetstudio.autoCapitalizeSnippetName": {
          "type": "boolean",
          "default": false,
          "description": "Automatically Capitalize a Snippet's TitleKey"
        },
        "snippetstudio.cleanupSnippetSelection": {
          "type": "boolean",
          "default": true,
          "description": "If mulitple lines are selected, adjusts the selection to be each full line. Convert's a selections tabs to spaces and removes shared leading spaces. This only changes behavior when a snippet is being created from a selection."
        },
        "snippetstudio.statusBarPriority": {
          "type": "integer",
          "default": 30,
          "description": "Priority of the snippet indicator status bar item (higher values appear further to the left)."
        },
        "snippetstudio.showStatusBarItem": {
          "type": "boolean",
          "default": true,
          "description": "Show the snippet indicator status bar item."
        },
        "snippetstudio.autoCreateSnippetFiles": {
          "type": "boolean",
          "default": true,
          "description": "When saving a snippet, automatically creates a snippet file if it doesn't already exist."
        }
      }
    },
    "walkthroughs": [
      {
        "id": "snippetStudioWalkthrough",
        "title": "Snippet Studio Quick Start",
        "description": "Learn how to manage your snippets with this extension.",
        "steps": [
          {
            "id": "openSnippetStudio",
            "title": "Open Snippet Studio",
            "media": {
              "markdown": "public/walkthroughs/openSnippetStudio.md"
            },
            "completionEvents": [
              "onView:snippet-manager-view-container",
              "onCommand:snippetstudio.openView",
              "onCommand:snippetstudio.openSettings",
              "onCommand:snippetstudio.refresh",
              "onCommand:snippetstudio.refreshLocations"
            ]
          },
          {
            "id": "newGlobalSnippetFile",
            "title": "Create a Global Snippet File",
            "media": {
              "markdown": "public/walkthroughs/newGlobalSnippetFile.md"
            },
            "completionEvents": [
              "onCommand:snippetstudio.createGlobalSnippetsFile",
              "onCommand:snippetstudio.createGlobalLangFile"
            ]
          },
          {
            "id": "firstSnippet",
            "title": "Create Your First Snippet",
            "media": {
              "markdown": "public/walkthroughs/firstSnippet.md"
            },
            "completionEvents": [
              "onCommand:snippetstudio.saveSnippet",
              "onCommand:snippetstudio.editSnippet",
              "onContext:snippetstudio.editorVisible"
            ]
          },
          {
            "id": "editSnippet",
            "title": "Edit an Existing Snippet",
            "media": {
              "markdown": "public/walkthroughs/editSnippet.md"
            },
            "completionEvents": [
              "onCommand:snippetstudio.editSnippet"
            ]
          }
        ]
      }
    ]
  },
  "scripts": {
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "npm run check-types && npm run lint && node esbuild.js --production",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/vscode": "^1.97.0",
    "@typescript-eslint/eslint-plugin": "^8.22.0",
    "@typescript-eslint/parser": "^8.22.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1",
    "@vscode/vsce": "^3.3.0",
    "esbuild": "^0.24.2",
    "eslint": "^9.19.0",
    "npm-run-all": "^4.1.5",
    "typescript": "^5.7.3"
  },
  "dependencies": {
    "glob": "^11.0.1",
    "strip-json-comments": "^5.0.1"
  }
}
